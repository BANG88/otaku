[alias]

# View abbreviated SHA, description, and history graph of the latest 20 commits
l = log --pretty=oneline -n 20 --graph --abbrev-commit

# View the current working tree status using the short format
s = status -s

# Show the diff between the latest commit and the current state
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

# Pull in remote changes for the current repository and all its submodules
p = pull --recurse-submodules

# Clone a repository including all submodules
c = clone --recursive

# Commit all changes
ca = !git add -A && git commit -av

# Switch to a branch, creating it if necessary
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

# List aliases
aliases = config --get-regexp alias

# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD

# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Interactive rebase with the given number of latest commits
reb = "!r() { git rebase -i HEAD~$1; }; r"

# Remove the old tag with this name and tag the latest commit with it.
retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Remove branches that have already been merged with main
# a.k.a. 'delete merged'
dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

# List contributors with number of commits
contributors = shortlog --summary --numbered

# Show the user email for the current repository.
whoami = config user.email

# 基本操作
co = checkout
ci = commit
br = branch
cp = cherry-pick
st = status
unstage = reset HEAD --
last = log -1 HEAD

# 日志相关
lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
history = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

# 分支操作
ba = branch -a                                   # 列出所有分支
bd = branch -d                                   # 删除分支
bD = branch -D                                   # 强制删除分支
pushall = !git remote | xargs -L1 git push --all # 推送到所有远程仓库

# 暂存区操作
staged = diff --cached # 查看暂存区变化
discard = checkout --  # 丢弃更改

# 提交相关
recommit = commit --amend     # 重新提交
uncommit = reset --soft HEAD^ # 撤销最后一次提交

# 标签操作
tag-delete = "!f() { git tag -d $1 && git push origin :refs/tags/$1; }; f"

# 子模块
subup = submodule update --init --recursive             # 更新所有子模块
subpull = !git submodule foreach git pull origin master # 拉取所有子模块

# 清理相关
cleanup = !git clean -df && git checkout -- .                                              # 清理工作区
forget = !git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D # 删除远程已删除的分支

# 冲突解决
conflicts = diff --name-only --diff-filter=U            # 列出有冲突的文件
resolve-ours = !git checkout --ours . && git add -u     # 使用我们的更改
resolve-theirs = !git checkout --theirs . && git add -u # 使用他们的更改

[apply]

# Detect whitespace errors when applying a patch
whitespace = fix

[core]

# Use custom `.gitignore` and `.gitattributes`
excludesfile = ~/.gitignore
attributesfile = ~/.gitattributes

# Treat spaces before tabs and all kinds of trailing whitespace as an error
# [default] trailing-space: looks for spaces at the end of a line
# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
whitespace = space-before-tab,-indent-with-non-tab,trailing-space

# Make `git rebase` safer on macOS
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
precomposeunicode = false

# Speed up commands involving untracked files such as `git status`.
# https://git-scm.com/docs/git-update-index#_untracked_cache
untrackedCache = true

[color]

# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
ui = auto

[color "branch"]

current = yellow reverse
local = yellow
remote = green

[color "diff"]

meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]

added = yellow
changed = green
untracked = cyan

[commit]

# https://help.github.com/articles/signing-commits-using-gpg/
gpgsign = false

[diff]

# Detect copies as well as renames
renames = copies

[diff "bin"]

# Use `hexdump` to diff binary files
textconv = hexdump -v -C

[help]

# Automatically correct and execute mistyped commands
autocorrect = 1

[merge]

# Include summaries of merged commits in newly created merge commit messages
log = true

[push]

# https://git-scm.com/docs/git-config#git-config-pushdefault
default = simple
# Make `git push` push relevant annotated tags when pushing branches out.
followTags = true

# URL shorthands

[url "git@github.com:"]

insteadOf = "gh:"
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

insteadOf = "github:"

[url "git@gist.github.com:"]

insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

insteadOf = "gist:"

[init]

templateDir = ~/.config/git/template/
